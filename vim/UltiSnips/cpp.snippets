priority -1

snippet inc
#include <${1:iostream}>$0
endsnippet

snippet pp
std::cout << ${1:"${2:Hello world}"} << std::endl;$0
endsnippet

snippet pf
std::cout << fmt::format("{}", ${1:"${2:Hello world}"}) << std::endl;$0
endsnippet

snippet pe_
std::cout << "$1 = \\\\\n" << ${1:x} << std::endl;$0
endsnippet

snippet pe
std::cout << "$1 = " << ${1:x} << std::endl;$0
endsnippet

snippet main
int main(int argc, char *argv[]) {
  $0
  return 0;
}
endsnippet

snippet fori
for (int i{}; i < ${1:10}; i++) {
  $0
}
endsnippet

snippet be "" i
std::begin(${1:x}), std::end($1)$0
endsnippet

snippet o<<
std::ostream& operator<<(std::ostream& o, ${1:int} ${2:v}) {
  return o << ${3:$2};
}$0
endsnippet

snippet td()
template <typename... Ts> void td() { std::cout << __PRETTY_FUNCTION__ << std::endl; }
endsnippet

snippet td
td<decltype(${1:int})>();$0
endsnippet

snippet cvM
cv::Mat ${1:m}(${2:4}, ${3:4}, ${5:CV_32FC1}, ${6:cv::Scalar(0, 0, 0)});
endsnippet
