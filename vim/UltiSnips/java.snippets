priority -1

# In general
#  Blocks     don't add ';'
#  Statements do    add ';'
#
# <mods> ::= P (public)
#          | # (protected)
#          | p (private)
#          | a (abstract)
#          | d (default)
#          | s (static)
#          | f (final)
#          | S (synchronized)
#
# classes, fields, methods:
#  cl<mods> f<mods> m<mods> in<mods> ct<mods>
#
# Java core:
#  re ~ return
#  if ~ if statement
#
# Java doc:
#  ** *p *r
#
# Types:
#  S L M LF
#
# Lambda: ->
#
# Misc:
#  Tt T=
#  sw
#  ext: if elif for fore fori
#
# Exceptions:
#  try tryr ca fi
#  th thr thi thu thin
#

global !p

def type_to_name(snip, text):
	snip.rv = _type_to_name(text)

def _type_to_name(text):
	if len(text) == 0:
		return ''
	elif '<' in text:
		return _type_to_name(text[:text.find('<')])
	else:
		return text[0].lower() + text[1:]

def lambda_prefix_to_args(text):
	args = (text or '').split(',')
	return f'({", ".join(args)})'


# Supports: [P#padsfS]+
#  See {mapping} for details
def modifiers(snip, mods, default=''):
	mapping = {
		'P': 'public',
		'#': 'protected',
		'p': 'private',
		'a': 'abstract',
		'd': 'default',
		's': 'static',
		'f': 'final',
		'S': 'synchronized',
	}
	after = ' ' if (mods or default) else ''
	mod_strings = [v for k, v in mapping.items() if k in (mods or default)]
	snip.rv = ' '.join(mod_strings) + after

endglobal

# Packages

snippet d.
dagger.
endsnippet

snippet d.m
dagger.multibindings.
endsnippet

snippet d.p
dagger.producers.
endsnippet

snippet d.p.m
dagger.producers.monitoring.
endsnippet

snippet j.u
java.util.
endsnippet

snippet j.i
java.io.
endsnippet

snippet j.cn
java.util.concurrent.
endsnippet

snippet j.s
java.util.stream.
endsnippet

snippet g.b
com.google.common.base.
endsnippet

snippet g.c
com.google.common.collect.
endsnippet

snippet g.cn
com.google.common.util.concurrent.
endsnippet

# Core Language

snippet pa
package `!v substitute(split(expand('%:p:h'), '/java/')[-1], '/', '.', 'g')`;
endsnippet

snippet pp
System.out.format("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}${2:${VISUAL}}${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet re "return"
return ${2:${1:${VISUAL:null/;//}};}
endsnippet

snippet if "if statement"
if ($1) {
	${2:${VISUAL:System.out.println("TODO");}}
}
endsnippet

snippet ifc "if condition"
if (${2:${VISUAL:/;//}}) {
	$1
}
endsnippet

snippet v "var field"
var ${1:name} = ${3:${2:${VISUAL:null/;//}};}$0
endsnippet

snippet /\bf([P#psf]*)/ "field" r
`!p modifiers(snip, match.group(1), 'pf')`${1:String} ${2:`!p type_to_name(snip, t[1])`}${VISUAL/(.+);?/ = $1/};$0
endsnippet

snippet /\bf([P#psf]*)=/ "field with value" r
`!p modifiers(snip, match.group(1), 'pf')`${1:String} ${2:`!p type_to_name(snip, t[1])`} = ${3:${VISUAL:null/;//}};$0
endsnippet

snippet /\bm([P#padsfS]*)/ "method" r
`!p modifiers(snip, match.group(1), 'p')`${1:String} ${2:`!p type_to_name(snip, t[1])`}($3) {
	${4:${VISUAL}}
}$0
endsnippet

snippet /\bcl([P#padsfS]*)/ "Class" r
`!p modifiers(snip, match.group(1), 'P')`class ${1:`!v expand('%:t:r')`} {
	${2:${VISUAL}}
}$0
endsnippet

snippet /\bin([P#padsfS]*)/ "interface" r
`!p modifiers(snip, match.group(1), 'P')`interface ${1:Name} {
	${2:${VISUAL}}
}$0
endsnippet

snippet sw "switch"
switch ($1) {
	case $2:
		${3:${VISUAL}}
}$0
endsnippet

snippet cs "case"
case $1:
	$0
endsnippet

snippet br "break"
break
endsnippet


snippet /([a-zA-Z,]*)->/ "Lambda" r
${2:`!p snip.rv = lambda_prefix_to_args(match.group(1))`} -> ${1:${VISUAL:\{\}/(.*\n.*)/{\n$1\n}/}}
endsnippet

snippet /([a-zA-Z,]*)->>/ "Multiline-lambda" r
${2:`!p snip.rv = lambda_prefix_to_args(match.group(1))`} -> {
	${1:${VISUAL:return null/;$//}};
}$0
endsnippet

snippet ** "javadoc"
/**
 * ${1:"This method..."}.$0
 */
endsnippet

snippet *p
@param ${1:name} ${2:<usage>}
endsnippet

snippet *r
@return ${1:<description>}
endsnippet

# Exceptions

snippet try
try {
	${1:${VISUAL}}
} catch(${2:Exception} e) {
	${3:throw new RuntimeException(e)};
}
endsnippet

snippet tryi "forward interrupt and throw"
try {
	${1:${VISUAL}}
} catch(InterruptedException e) {
	Thread.currentThread().interrupt();
	throw new RuntimeException(e);
}
endsnippet

snippet tryi "return"
try {
	${1:${VISUAL}}
} catch(InterruptedException e) {
	return;
}
endsnippet

snippet ca
catch(${1:Exception} e) {
	${2:${VISUAL:throw new RuntimeException(e)}};
}
endsnippet

snippet fi
finally {
	${1:${VISUAL}}
}
endsnippet

snippet tryr
try (${1:${VISUAL/([^;\n]*);\n(.*)/$1/}}) {
	${2:${VISUAL/([^;\n]*);\n\s*(.*)/$2/}}
}
endsnippet

snippet th
throw ${1:e};
endsnippet

snippet thr
throw new RuntimeException($1);
endsnippet

snippet thi
throw new IllegalStateException($1);
endsnippet

snippet /thu/ "" r
throw new UnsupportedOperationException($1);
endsnippet

snippet thin
if (Thread.interrupted()) {
	throw new InterruptedException();
}
endsnippet

snippet intr
if (Thread.interrupted()) {
	throw new InterruptedException();
}
endsnippet

# Type support

snippet Tt "Type, and name" i
${1:T} ${2:`!p type_to_name(snip, t[1])`}$0
endsnippet

snippet T= "Type, name, and value" i
${1:T} ${2:`!p type_to_name(snip, t[1])`} = ${3:new `!p type_to_name(snip, t[1])`($4)};
endsnippet

# Misc Snippets

snippet time
{
	Stopwatch sw = Stopwatch.createStarted();
	${1:${VISUAL:int x = 10/;//};}
	System.out.format("Elapsed: %s\n", sw.elapsed());
}
endsnippet

snippet test
@Test
public void ${3:${1:actionTaken}_${2:expectedResult}}() {
	assertThat(null).isNull();
}
endsnippet

snippet sub "Flow.Subscriber" i
new Flow.Subscriber<${1:T}>() {
	@Override
	public void onSubscribe(Flow.Subscription subscription) {}

	@Override
	public void onNext($1 value) {}

	@Override
	public void onError(Throwable error) {}

	@Override
	public void onComplete() {}
}
endsnippet

snippet ibench
import java.util.concurrent.TimeUnit;
import org.openjdk.jmh.annotations.AuxCounters;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.CompilerControl;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Group;
import org.openjdk.jmh.annotations.GroupThreads;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OperationsPerInvocation;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Param;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.TearDown;
import org.openjdk.jmh.annotations.Threads;
import org.openjdk.jmh.annotations.Timeout;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.infra.BenchmarkParams;
import org.openjdk.jmh.infra.Blackhole;
import org.openjdk.jmh.infra.Control;
import org.openjdk.jmh.infra.IterationParams;
import org.openjdk.jmh.infra.ThreadParams;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.CommandLineOptionException;
import org.openjdk.jmh.runner.options.CommandLineOptions;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
endsnippet

snippet cbench
@BenchmarkMode(Mode.AverageTime)
@Fork(2)
@Warmup(iterations = 2, time = 2, timeUnit = TimeUnit.SECONDS)
@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@State(Scope.Benchmark)
public class ${1:`!v expand('%:t:r')`} {
	$0
}
endsnippet

snippet bench
@Benchmark
public Object ${1:benchmark}() {
	return null;
}
endsnippet

snippet benchm "Provided main"
org.openjdk.jmh.Main.main(new String[]{$1});$0
endsnippet

snippet benchm "Call Runner"
new Runner(
		new OptionsBuilder() //
		.include(".*")
		.forks(1)
		.build())
.run();
endsnippet

snippet benchmain "Provided main"
org.openjdk.jmh.Main.main(new String[]{$1});$0
endsnippet

snippet benchmain "Call Runner"
new Runner(
		new OptionsBuilder() //
		.include(".*")
		.forks(1)
		.build())
.run();
endsnippet

snippet benchr "Runner"
new Runner(
		new OptionsBuilder() //
		.include(".*")
		.result("/tmp/last_benchmark.csv")
		.resultFormat(ResultFormatType.CSV)
		.forks(1)
		.build())
.run();
endsnippet
